{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      ordersTemp: [],\n      user_id: '',\n      select: '',\n      selectOrdstate: '已付款',\n      TempPage: '',\n      // TempPage: 暫存頁數\n      // pages: '',\n      // 總頁數\n      pageLimit: 20,\n      // 一頁顯示幾筆\n      pageStart: 0,\n      // 起始頁數\n      pageEnd: 20\n      // 結束頁數\n      // ProductsID: [],\n      // ProductsID: 顯示的產品\n      // pageID: '',\n      // pageID: 沒用到拿來觀察是否取到\n    };\n  },\n\n  mounted: function () {\n    // 取得本地端user的id\n    let user = JSON.parse(localStorage.getItem('user'));\n    this.user_id = user.id;\n\n    // axios取得訂單資料\n    axios.get('http://192.168.68.60:8082/api/products/getOrderProductsUser/' + this.user_id).then(res => {\n      this.ordersTemp = res.data;\n      console.log(this.orders);\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n  methods: {\n    pageChange(b) {\n      this.TempPage = b;\n      this.pageStart = (this.TempPage - 1) * this.pageLimit;\n      this.pageEnd = this.pageStart + this.pageLimit;\n    }\n  },\n  computed: {\n    // orders的createdAt取得年月日\n    orders() {\n      // 判斷select有值,執行分割日期字串與頁數統計,回傳select的查詢結果 \n\n      if (this.select != '' || this.selectOrdstate != '') {\n        this.ordersTemp.forEach(item => {\n          // forEach:陣列迴圈\n          item.createdAt = item.createdAt.split('T')[0];\n          // split:分割字串\n        });\n\n        return this.ordersTemp.filter(searchResult => searchResult.ord_number.includes(this.select) && searchResult.ord_state.includes(this.selectOrdstate)).slice(this.pageStart, this.pageEnd);\n      } else {\n        this.ordersTemp.forEach(item => {\n          // forEach:陣列迴圈\n          item.createdAt = item.createdAt.split('T')[0];\n          // split:分割字串\n        });\n\n        return this.ordersTemp.slice(this.pageStart, this.pageEnd);\n      }\n\n      // this.ordersTemp.forEach((item) => {\n      //   // forEach:陣列迴圈\n      //   item.createdAt = item.createdAt.split('T')[0]\n      //   // split:分割字串\n      // })\n      // return this.ordersTemp.filter\n      //   (searchResult => searchResult.ord_number.includes(this.select));\n    },\n\n    // 計算orders總頁數\n    page() {\n      if (this.select != '' || this.selectOrdstate != '') {\n        if (this.page > this.pages) {\n          this.pageStart = 0, this.pageEnd = this.pageStart + this.pageLimit;\n          this.TempPage = 1;\n          return 1;\n        }\n        return this.TempPage;\n        // , this.pageStart = 0, this.pageEnd = this.pageStart + this.pageLimit\n        // return this.TempPage\n        // this.page: 當前頁數\n        // page: 當前頁數\n      } else {\n        return this.TempPage;\n      }\n      // TempPage: 預設第一頁(只有開啟網頁觸發),只有變動才會觸發以下的判斷\n      // 判斷: 如果page大於pages就回到第一頁\n      // 判斷: titleSearch有變動就回到第一頁\n    },\n\n    pages() {\n      if (this.select == '' || this.selectOrdstate != '') {\n        // titleSearch: 搜尋的標題有變動就會觸發\n        return Math.ceil(this.orders.length / this.pageLimit);\n        // 計算頁數 ordersTemp\n      } else {\n        return Math.ceil(this.orders.length / this.pageLimit);\n        // 計算頁數 orders\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","data","ordersTemp","user_id","select","selectOrdstate","TempPage","pageLimit","pageStart","pageEnd","mounted","user","JSON","parse","localStorage","getItem","id","get","then","res","console","log","orders","catch","err","methods","pageChange","b","computed","forEach","item","createdAt","split","filter","searchResult","ord_number","includes","ord_state","slice","page","pages","Math","ceil","length"],"sourceRoot":"","sources":["D:\\sshstudiocode\\Vue\\vue-3-authentication-jwt-shoppingcart\\src\\components\\package\\Order.vue"],"sourcesContent":["<template>\r\n  <h1>訂單</h1>\r\n  <!-- 查詢 -->\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-4\">\r\n        <input type=\"text\" v-model=\"select\">\r\n\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <div class=\"form-check form-check-inline\">\r\n          <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"已付款\" v-model=\"selectOrdstate\">\r\n          <label class=\"form-check-label\" for=\"inlineRadio1\" >已付款</label>\r\n        </div>\r\n        <div class=\"form-check form-check-inline\">\r\n          <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"未付款\" v-model=\"selectOrdstate\">\r\n          <label class=\"form-check-label\" for=\"inlineRadio2\">未付款</label>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <hr>\r\n\r\n  <table class=\"table table-bordered\">\r\n    <thead>\r\n      <tr>\r\n        <!-- <th scope=\"col\">#</th> -->\r\n        <th scope=\"col\">訂單編號</th>\r\n        <th scope=\"col\">產品項目</th>\r\n        <th scope=\"col\">金額</th>\r\n        <th scope=\"col\">是否付款</th>\r\n        <th scope=\"col\">物流狀態</th>\r\n        <th scope=\"col\">訂單日期</th>\r\n\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr v-for=\"(item, index) in orders\" :key=\"item.id\">\r\n        <!-- 取得陣列序號 -->\r\n        <!-- <th scope=\"row\">{{ index + 1 }}</th> -->\r\n        <td>{{ item.ord_number }}</td>\r\n\r\n        <td>\r\n          <!-- 產品點擊顯示 資料在orders的orderproduct Json格式-->\r\n\r\n\r\n\r\n\r\n          <table class=\"table table-borderless\">\r\n\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in item.orderproduct\" :key=\"item.id\">\r\n                <td>{{ item.ord_product_title }}</td>\r\n                <td>{{ item.ord_product_price }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n\r\n\r\n        </td>\r\n\r\n        <td>{{ item.ord_total }}</td>\r\n        <td>{{ item.ord_state }}</td>\r\n        <td>{{ item.ord_logistics }}</td>\r\n        <td>{{ item.createdAt }}</td>\r\n\r\n      </tr>\r\n    </tbody>\r\n\r\n  </table>\r\n\r\n  <!-- 分頁 -->\r\n\r\n  <nav aria-label=\"Page navigation example\">\r\n    <ul class=\"pagination\">\r\n      <li class=\"page-item\" v-if=\"TempPage > 1\">\r\n        <a class=\"page-link\" href=\"\" @click.prevent=\"pageChange(page - 1)\">Previous</a>\r\n      </li>\r\n      <li class=\"page-item\" v-for=\"page in pages\" :key=\"page\">\r\n        <a class=\"page-link\" href=\"\" @click.prevent=\"pageChange(page)\">{{ page }}</a>\r\n      </li>\r\n      <li class=\"page-item\" v-if=\"page < pages\">\r\n        <a class=\"page-link\" href=\"\" @click.prevent=\"pageChange(page + 1)\">Next</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n\r\n  <!-- <nav aria-label=\"Page navigation example\">\r\n    <ul class=\"pagination\">\r\n      <li class=\"page-item\">\r\n        <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\r\n          <span aria-hidden=\"true\">&laquo;</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"page-item\"><a class=\"page-link\" href=\"#\">1</a></li>\r\n      <li class=\"page-item\"><a class=\"page-link\" href=\"#\">2</a></li>\r\n      <li class=\"page-item\"><a class=\"page-link\" href=\"#\">3</a></li>\r\n      <li class=\"page-item\">\r\n        <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\r\n          <span aria-hidden=\"true\">&raquo;</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </nav> -->\r\n\r\n\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ordersTemp: [],\r\n      user_id: '',\r\n      select: '',\r\n      selectOrdstate: '已付款',\r\n\r\n      TempPage: '',\r\n      // TempPage: 暫存頁數\r\n      // pages: '',\r\n      // 總頁數\r\n      pageLimit: 20,\r\n      // 一頁顯示幾筆\r\n      pageStart: 0,\r\n      // 起始頁數\r\n      pageEnd: 20,\r\n      // 結束頁數\r\n      // ProductsID: [],\r\n      // ProductsID: 顯示的產品\r\n      // pageID: '',\r\n      // pageID: 沒用到拿來觀察是否取到\r\n\r\n    }\r\n  },\r\n\r\n  mounted: function () {\r\n    // 取得本地端user的id\r\n    let user = JSON.parse(localStorage.getItem('user'));\r\n    this.user_id = user.id\r\n\r\n\r\n    // axios取得訂單資料\r\n    axios.get('http://192.168.68.60:8082/api/products/getOrderProductsUser/' + this.user_id)\r\n      .then((res) => {\r\n        this.ordersTemp = res.data\r\n        console.log(this.orders)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n      })\r\n\r\n\r\n  },\r\n\r\n  methods: {\r\n    pageChange(b) {\r\n      this.TempPage = b\r\n      this.pageStart = (this.TempPage - 1) * this.pageLimit\r\n      this.pageEnd = this.pageStart + this.pageLimit\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    // orders的createdAt取得年月日\r\n    orders() {\r\n      // 判斷select有值,執行分割日期字串與頁數統計,回傳select的查詢結果 \r\n\r\n\r\n      if (this.select != '' || this.selectOrdstate != '') {\r\n        this.ordersTemp.forEach((item) => {\r\n          // forEach:陣列迴圈\r\n          item.createdAt = item.createdAt.split('T')[0]\r\n          // split:分割字串\r\n        })\r\n        return this.ordersTemp.filter\r\n          (searchResult => searchResult.ord_number.includes(this.select) && searchResult.ord_state.includes(this.selectOrdstate))\r\n          .slice(this.pageStart, this.pageEnd);\r\n      } else {\r\n        this.ordersTemp.forEach((item) => {\r\n          // forEach:陣列迴圈\r\n          item.createdAt = item.createdAt.split('T')[0]\r\n          // split:分割字串\r\n        })\r\n        return this.ordersTemp.slice(this.pageStart, this.pageEnd);\r\n\r\n      }\r\n\r\n\r\n\r\n      // this.ordersTemp.forEach((item) => {\r\n      //   // forEach:陣列迴圈\r\n      //   item.createdAt = item.createdAt.split('T')[0]\r\n      //   // split:分割字串\r\n      // })\r\n      // return this.ordersTemp.filter\r\n      //   (searchResult => searchResult.ord_number.includes(this.select));\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n    // 計算orders總頁數\r\n    page() {\r\n\r\n      if (this.select != '' || this.selectOrdstate != '') {\r\n        if (this.page > this.pages) {\r\n          this.pageStart = 0,\r\n            this.pageEnd = this.pageStart + this.pageLimit\r\n          this.TempPage = 1\r\n          return 1\r\n        }\r\n\r\n        return this.TempPage\r\n        // , this.pageStart = 0, this.pageEnd = this.pageStart + this.pageLimit\r\n        // return this.TempPage\r\n        // this.page: 當前頁數\r\n        // page: 當前頁數\r\n      }\r\n      else {\r\n        return this.TempPage\r\n      }\r\n      // TempPage: 預設第一頁(只有開啟網頁觸發),只有變動才會觸發以下的判斷\r\n      // 判斷: 如果page大於pages就回到第一頁\r\n      // 判斷: titleSearch有變動就回到第一頁\r\n    },\r\n\r\n\r\n\r\n    pages() {\r\n      if (this.select == '' || this.selectOrdstate != '') {\r\n        // titleSearch: 搜尋的標題有變動就會觸發\r\n        return Math.ceil(this.orders.length / this.pageLimit)\r\n        // 計算頁數 ordersTemp\r\n\r\n      } else {\r\n        return Math.ceil(this.orders.length / this.pageLimit)\r\n        // 計算頁數 orders\r\n      }\r\n    },\r\n\r\n\r\n  },\r\n\r\n}\r\n\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}