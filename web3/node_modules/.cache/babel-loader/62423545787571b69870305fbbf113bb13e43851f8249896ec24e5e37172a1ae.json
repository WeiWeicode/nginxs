{"ast":null,"code":"import AuthService from '../services/auth.service';\n\n// state: 狀態, 用來存放資料\n// actions: 用來觸發mutations中的方法，可以包含任意異步操作\n// mutations: 用來定義狀態的變更，必須是同步函數\n// Promise: 一個表示非同步運算的最終完成或失敗的物件\n\nconst user = JSON.parse(localStorage.getItem('user'));\n// 從localStorage中獲取user\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\n// initialState: 狀態的初始值\n\nexport const auth = {\n  namespaced: true,\n  //   namespaced: true, 使模塊具有命名空間，這樣可以避免不同模塊之間的命名衝突\n  state: initialState,\n  //   state: 狀態, 用來存放資料\n  actions: {\n    login({\n      commit\n    }, user) {\n      // login: 登入\n      return AuthService.login(user).then(\n      // 調用AuthService中的login方法,user到本地儲存\n      user => {\n        commit('loginSuccess', user);\n        //   commit: 觸發mutations中的方法\n        return Promise.resolve(user);\n        //   Promise.resolve: 返回一個\"成功\"的promise對象\n      }, error => {\n        commit('loginFailure');\n        //   commit: 觸發mutations中的方法\n        return Promise.reject(error);\n        //   Promise.reject: 返回一個\"失敗\"的promise對象\n      });\n    },\n\n    logout({\n      commit\n    }) {\n      AuthService.logout();\n      commit('logout');\n    },\n    // 調用AuthService中的logout方法,移除JWT本地儲存\n    register({\n      commit\n    }, user) {\n      // register: 註冊\n      return AuthService.register(user).then(response => {\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }, error => {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    // loginSuccess: 登入成功\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // loginFailure: 登入失敗\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // logout: 登出\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    // registerSuccess: 註冊成功\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n    // registerFailure: 註冊失敗\n  }\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","Promise","resolve","error","reject","logout","register","response","data","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"sources":["D:/sshstudiocode/Vue/vue-3-authentication-jwt/src/store/auth.module.js"],"sourcesContent":["import AuthService from '../services/auth.service';\r\n\r\n// state: 狀態, 用來存放資料\r\n// actions: 用來觸發mutations中的方法，可以包含任意異步操作\r\n// mutations: 用來定義狀態的變更，必須是同步函數\r\n// Promise: 一個表示非同步運算的最終完成或失敗的物件\r\n\r\n\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n// 從localStorage中獲取user\r\nconst initialState = user\r\n  ? { status: { loggedIn: true }, user }\r\n  : { status: { loggedIn: false }, user: null };\r\n// initialState: 狀態的初始值\r\n\r\nexport const auth = {\r\n  namespaced: true, \r\n//   namespaced: true, 使模塊具有命名空間，這樣可以避免不同模塊之間的命名衝突\r\n  state: initialState,\r\n//   state: 狀態, 用來存放資料\r\n  actions: {\r\n    login({ commit }, user) {\r\n        // login: 登入\r\n      return AuthService.login(user).then(\r\n        // 調用AuthService中的login方法,user到本地儲存\r\n        user => {\r\n          commit('loginSuccess', user);\r\n        //   commit: 觸發mutations中的方法\r\n          return Promise.resolve(user);\r\n        //   Promise.resolve: 返回一個\"成功\"的promise對象\r\n        },\r\n        error => {\r\n          commit('loginFailure');\r\n        //   commit: 觸發mutations中的方法\r\n          return Promise.reject(error);\r\n        //   Promise.reject: 返回一個\"失敗\"的promise對象\r\n        }\r\n      );\r\n    },\r\n    logout({ commit }) {\r\n      AuthService.logout();\r\n      commit('logout');\r\n    },\r\n    // 調用AuthService中的logout方法,移除JWT本地儲存\r\n    register({ commit }, user) {\r\n        // register: 註冊\r\n      return AuthService.register(user).then(\r\n        response => {\r\n          commit('registerSuccess');\r\n          return Promise.resolve(response.data);\r\n        \r\n        },\r\n        error => {\r\n          commit('registerFailure');\r\n          return Promise.reject(error);\r\n        }\r\n      );\r\n    }\r\n  },\r\n  mutations: {\r\n    loginSuccess(state, user) {\r\n      state.status.loggedIn = true;\r\n      state.user = user;\r\n    },\r\n    // loginSuccess: 登入成功\r\n    loginFailure(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    // loginFailure: 登入失敗\r\n    logout(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    // logout: 登出\r\n    registerSuccess(state) {\r\n      state.status.loggedIn = false;\r\n    },\r\n    // registerSuccess: 註冊成功\r\n    registerFailure(state) {\r\n      state.status.loggedIn = false;\r\n    }\r\n    // registerFailure: 註冊失敗\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,WAAW,MAAM,0BAA0B;;AAElD;AACA;AACA;AACA;;AAIA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrD;AACA,MAAMC,YAAY,GAAGL,IAAI,GACrB;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAAEP;AAAK,CAAC,GACpC;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAM,CAAC;EAAEP,IAAI,EAAE;AAAK,CAAC;AAC/C;;AAEA,OAAO,MAAMQ,IAAI,GAAG;EAClBC,UAAU,EAAE,IAAI;EAClB;EACEC,KAAK,EAAEL,YAAY;EACrB;EACEM,OAAO,EAAE;IACPC,KAAK,CAAC;MAAEC;IAAO,CAAC,EAAEb,IAAI,EAAE;MACpB;MACF,OAAOD,WAAW,CAACa,KAAK,CAACZ,IAAI,CAAC,CAACc,IAAI;MACjC;MACAd,IAAI,IAAI;QACNa,MAAM,CAAC,cAAc,EAAEb,IAAI,CAAC;QAC9B;QACE,OAAOe,OAAO,CAACC,OAAO,CAAChB,IAAI,CAAC;QAC9B;MACA,CAAC,EACDiB,KAAK,IAAI;QACPJ,MAAM,CAAC,cAAc,CAAC;QACxB;QACE,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;QAC9B;MACA,CAAC,CACF;IACH,CAAC;;IACDE,MAAM,CAAC;MAAEN;IAAO,CAAC,EAAE;MACjBd,WAAW,CAACoB,MAAM,EAAE;MACpBN,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IACD;IACAO,QAAQ,CAAC;MAAEP;IAAO,CAAC,EAAEb,IAAI,EAAE;MACvB;MACF,OAAOD,WAAW,CAACqB,QAAQ,CAACpB,IAAI,CAAC,CAACc,IAAI,CACpCO,QAAQ,IAAI;QACVR,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACC,OAAO,CAACK,QAAQ,CAACC,IAAI,CAAC;MAEvC,CAAC,EACDL,KAAK,IAAI;QACPJ,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;MAC9B,CAAC,CACF;IACH;EACF,CAAC;EACDM,SAAS,EAAE;IACTC,YAAY,CAACd,KAAK,EAAEV,IAAI,EAAE;MACxBU,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,IAAI;MAC5BG,KAAK,CAACV,IAAI,GAAGA,IAAI;IACnB,CAAC;IACD;IACAyB,YAAY,CAACf,KAAK,EAAE;MAClBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACnB,CAAC;IACD;IACAmB,MAAM,CAACT,KAAK,EAAE;MACZA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACnB,CAAC;IACD;IACA0B,eAAe,CAAChB,KAAK,EAAE;MACrBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IAC/B,CAAC;IACD;IACAoB,eAAe,CAACjB,KAAK,EAAE;MACrBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IAC/B;IACA;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}